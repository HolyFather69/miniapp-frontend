window.Telegram.WebApp.ready();
const username = window.Telegram.WebApp.initDataUnsafe.user.username;

const clickButton = document.getElementById('clickButton');
const openCaseButton = document.getElementById('openCase');
const claimBonusButton = document.getElementById('claimBonus');
const profileButton = document.getElementById('profile');
const lvltopButton = document.getElementById('lvltop');
const casetopButton = document.getElementById('casetop');
const clanTopButton = document.getElementById('clanTop');
const clanButton = document.getElementById('clan');
const titlesButton = document.getElementById('titles');
const adminButton = document.getElementById('admin');
const balanceDisplay = document.getElementById('balance');
const levelDisplay = document.getElementById('level');
const xpDisplay = document.getElementById('xp');
const modal = document.getElementById('modal');
const modalBody = document.getElementById('modal-body');
const closeModal = document.getElementsByClassName('close')[0];

let balance = 0;
let level = 1;
let xp = 0;
let nextLevelXp = 500;

function updateDisplay() {
    balanceDisplay.textContent = `üí∞ ${balance} ‚ÇΩ`;
    levelDisplay.textContent = `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${level}`;
    xpDisplay.textContent = `üìà –û–ø—ã—Ç: ${xp}/${nextLevelXp}`;
}

function showModal(content) {
    modalBody.innerHTML = content;
    modal.style.display = 'block';
}

closeModal.onclick = () => modal.style.display = 'none';
window.onclick = (event) => { if (event.target == modal) modal.style.display = 'none'; };

fetch(`/profile?username=${username}`).then(r => r.json()).then(data => {
    balance = data.balance;
    level = data.level;
    xp = data.xp;
    nextLevelXp = get_level_xp(level + 1);
    updateDisplay();
});

clickButton.addEventListener('click', () => {
    fetch('/click', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username}) })
        .then(r => r.json())
        .then(data => { balance = data.balance; updateDisplay(); });
});

openCaseButton.addEventListener('click', () => {
    fetch('/open_case', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username}) })
        .then(r => r.json())
        .then(data => {
            if (data.error) return alert(data.error);
            balance = data.balance;
            level = data.level;
            xp = data.total_xp;
            nextLevelXp = get_level_xp(level + 1);
            updateDisplay();
            showModal(`@{username}, —Ç—ã –≤—Å–∫—Ä—ã–ª ${is_superuser() ? 5 : 1} –∫–µ–π—Å–æ–≤! –í–æ—Ç —Ç–≤–æ–π —É–ª–æ–≤:<br>` + 
                data.titles_won.map(t => `üéÅ ${t.title} (+${t.xp * (is_superuser() ? 2 : 1)} XP, —à–∞–Ω—Å: ${t.chance.toFixed(5)}%)`).join('<br>') + 
                `<br><br>üìà –û–ø—ã—Ç –∑–∞ –∫–µ–π—Å—ã: ${data.case_xp} XP<br>üìö –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: ${data.total_xp}` +
                (data.level_up_msg ? `<br><br>${data.level_up_msg}` : ''));
        });
});

claimBonusButton.addEventListener('click', () => {
    fetch('/claim_bonus', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username}) })
        .then(r => r.json())
        .then(data => {
            if (data.error) return alert(data.error);
            balance = data.balance;
            updateDisplay();
            showModal(data.message);
        });
});

profileButton.addEventListener('click', () => {
    fetch(`/profile?username=${username}`).then(r => r.json()).then(data => {
        showModal(`üë§ –ü—Ä–æ—Ñ–∏–ª—å @${username} ‚Äî –ª–µ–≥–µ–Ω–¥–∞ –≤ –¥–µ–ª–µ!<br>` +
            `üí∞ –ë–∞–ª–∞–Ω—Å: ${data.balance}‚ÇΩ (—Ç—ã –±–æ–≥–∞—á –∏–ª–∏ –µ—â—ë –Ω–µ—Ç?)<br>` +
            `üì¶ –ö–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: ${data.cases_opened} (–º–∞—Å—Ç–µ—Ä –≤—Å–∫—Ä—ã—Ç–∏—è!)<br>` +
            `üèÜ –õ—É—á—à–∏–π —Ç–∏—Ç—É–ª: ${data.best_title} (–∫—Ä—É—Ç–æ –∑–≤—É—á–∏—Ç, –∞?)<br>` +
            `‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${data.level} (—Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ!)<br>` +
            `üìà –û–ø—ã—Ç: ${data.xp_bar}<br>` +
            `üè∞ Clan: ${data.clan}` +
            (data.superuser ? `<br>üéñÔ∏è SuperUser: x2 –æ–ø—ã—Ç–∞, x5 –∫–ª–∏–∫–æ–≤ –∏ –∫–µ–π—Å–æ–≤! –¢—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–π! ‚ö°` : ''));
    });
});

lvltopButton.addEventListener('click', () => {
    fetch('/lvltop').then(r => r.json()).then(data => showModal(data.top));
});

casetopButton.addEventListener('click', () => {
    fetch('/casetop').then(r => r.json()).then(data => showModal(data.top));
});

clanTopButton.addEventListener('click', () => {
    fetch('/clan_top').then(r => r.json()).then(data => showModal(data.top));
});

clanButton.addEventListener('click', () => {
    fetch(`/clan?username=${username}`).then(r => r.json()).then(data => {
        let content = `üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–ª–∞–Ω–æ–≤, –≤–æ–∏–Ω! ‚öîÔ∏è<br>` +
            `–¢–≤–æ–π –∫–ª–∞–Ω: ${data.clan ? data.clan : '–ù–µ—Ç –∫–ª–∞–Ω–∞'}<br>` +
            `–ë–∞–ª–∞–Ω—Å: ${data.balance}‚ÇΩ<br><br>` +
            `<input id="clanName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞"><br>` +
            `<button onclick="createClan()">üè∞ –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω (50000‚ÇΩ)</button>` +
            `<button onclick="joinClan()">ü§ù –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω</button><br><br>`;
        
        if (data.clan && data.is_leader) {
            content += `üë• –¢–≤–æ—è –±—Ä–∞—Ç–≤–∞ –≤ –∫–ª–∞–Ω–µ ${data.clan}:<br>` +
                data.members.map(m => `@{m.username} ‚Äî ${m.cases} üì¶`).join('<br>') +
                `<br><br><input id="targetMember" placeholder="–ö–æ–≥–æ –∫–∏–∫–Ω—É—Ç—å/–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å (@username)"><br>` +
                `<button onclick="kickMember('${data.clan}')">‚öîÔ∏è –ö–∏–∫–Ω—É—Ç—å –±–æ–π—Ü–∞</button>` +
                `<button onclick="inviteMember('${data.clan}')">üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω</button><br>`;
        }
        
        content += `<br>üì¨ –¢–≤–æ—è –∫–ª–∞–Ω–æ–≤–∞—è –ø–æ—á—Ç–∞, @${username}!<br>`;
        if (data.invites.length) {
            content += "‚ú® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω—ã:<br>" + 
                data.invites.map(i => `${i.clan_name} (ID: ${i.id}) ‚Äî –∑–æ–≤—É—Ç –≤ –±–∞–Ω–¥—É! ü§ù ` +
                    `<button onclick="acceptInvite(${i.id})">‚úÖ –í—Å—Ç—É–ø–∏—Ç—å</button>` +
                    `<button onclick="declineRequest(${i.id})">‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è</button>`).join('<br>');
        }
        if (data.requests.length) {
            content += "<br>üì© –ó–∞—è–≤–∫–∏ –≤ —Ç–≤–æ–π –∫–ª–∞–Ω:<br>" + 
                data.requests.map(r => `@{r.username} (${r.type == 'join' ? '—Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å' : '—Ç—ã –∑–≤–∞–ª'}, ID: ${r.id}) ` +
                    `<button onclick="acceptRequest(${r.id})">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>` +
                    `<button onclick="declineRequest(${r.id})">‚ùå –û—Ç–∫–∞–∑–∞—Ç—å</button>`).join('<br>');
        }
        if (!data.invites.length && !data.requests.length) {
            content += "–¢–∏—à–∏–Ω–∞ –≤ —ç—Ñ–∏—Ä–µ, –±—Ä–∞—Ç–∞–Ω! –ù–∏ –ø–∏—Å–µ–º, –Ω–∏ –≥–æ—Å—Ç–µ–π! üì≠";
        }
        
        content += `<br><br>üè∞ –í—Å–µ –∫–ª–∞–Ω—ã:<br>` + 
            data.clans.map(c => `${c.name} (–õ–∏–¥–µ—Ä: @${c.leader}, –ö–µ–π—Å—ã: ${c.cases})`).join('<br>');
        
        showModal(content);
    });
});

titlesButton.addEventListener('click', () => {
    fetch('/all_titles').then(r => r.json()).then(data => showModal(data.titles));
});

adminButton.addEventListener('click', () => {
    let content = `‚ö° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è @${username}<br>` +
        `<input id="targetUser" placeholder="–ò–º—è —é–∑–µ—Ä–∞ (@username)"><br>` +
        `<input id="amount" type="number" placeholder="–°—É–º–º–∞"><br>` +
        `<button onclick="setSuperuser()">‚ö° –î–∞—Ç—å SuperUser</button>` +
        `<button onclick="delSuperuser()">‚ùå –£–±—Ä–∞—Ç—å SuperUser</button>` +
        `<button onclick="setBalance()">üíº –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å</button>`;
    showModal(content);
});

function createClan() {
    const clanName = document.getElementById('clanName').value;
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'create', clan_name: clanName}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function joinClan() {
    const clanName = document.getElementById('clanName').value;
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'join', clan_name: clanName}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function kickMember(clanName) {
    const target = document.getElementById('targetMember').value.replace('@', '');
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'kick', clan_name: clanName, target}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function inviteMember(clanName) {
    const target = document.getElementById('targetMember').value.replace('@', '');
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'invite', clan_name: clanName, target}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function acceptInvite(reqId) {
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'accept_invite', req_id: reqId}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function acceptRequest(reqId) {
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'accept_request', req_id: reqId}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function declineRequest(reqId) {
    fetch('/clan', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, action: 'decline', req_id: reqId}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function setSuperuser() {
    const target = document.getElementById('targetUser').value.replace('@', '');
    fetch('/superuser', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, target}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function delSuperuser() {
    const target = document.getElementById('targetUser').value.replace('@', '');
    fetch('/delsuperuser', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, target}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function setBalance() {
    const target = document.getElementById('targetUser').value.replace('@', '');
    const amount = parseInt(document.getElementById('amount').value);
    fetch('/setbalance', { method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify({username, target, amount}) })
        .then(r => r.json())
        .then(data => data.error ? alert(data.error) : showModal(data.message));
}

function is_superuser() {
    return fetch(`/profile?username=${username}`).then(r => r.json()).then(data => data.superuser);
}

function get_level_xp(level) {
    return Math.floor(500 * level * (1 + level ** 1.5 / 100));
}